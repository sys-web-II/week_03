===============================================================================================
Institute....: Universidad Técnica Nacional
Campus.......: Pacífico
Career.......: Tecnologías de Información
Course.......: ITI-621 - Tecnología y Sistemas WEB III
Period.......: 2-2025
Document.....: 01_React_Fundamentals.txt
Goals........: Create development environment				
                - Install NodeJs tools
				- Create a single React application (only for testing)
				- Update Visual Studio Code
Professor....: Jorge Ruiz (york)
Student......:
===============================================================================================

Step-01 - Validate to run script in Shell:

	- Open the PowerShell as administrator
	
		- Execute:
		
			Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine	(select O for All)
			Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser	(select O for All)

			
			Get-ExecutionPolicy -List
			
			- you can see:

				Scope			ExecutionPolicy
				-------------	---------------
				MachinePolicy   Undefined
				UserPolicy		Undefined
				Process			Undefined
				CurrentUser		RemoteSigned
				LocalMachine	RemoteSigned


Step 02 - Install tools on Windows machine

	- NodeJS 22.16.0 LTS from https://nodejs.org/en 
	
		- ensure you have of the application route stored into the
		- environment variable called Path
		
		
	- Open PowerShell terminal (as administrator) and writes:

		node --version		(22.16.0)
		npm --version		(11.0.0)		
		npx --version		(11.0.0)		
		
		- Update npm (if is required):
		
			npm install -g npm@11.4.1
		
			npm --version	(11.4.1)
		
		
		- Install global dependencies:
		
			npm install -g react-devtools
			npm install -g eslint
			npm install -g @vue/cli
				
				
	- Close PowerShell			
	
	
	- Install REACT plugins, open the web-browser and uses one of the link below 
	
		- FireFox.........: https://addons.mozilla.org/en-US/firefox/addon/react-devtools/
		- Google Chrome...: https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en
		- Microsoft Edge..: https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil
	
		- Brave...........: uses the the Google Chrome link
	
	
	- Install plugins into Microsoft Visual Code
	
		- Open Microsoft Visual Code and add plugins, and search:

			- ESLint or install from the next link: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
	
			- Prettier-Code formatter
		

Step 03 - Create new project directory 

	- Using powerShell (as single user), open your work directory:
	
		cd web_02 (eg)	

		npx create-vite@latest class_01
		
			- Select React and press [Enter]
		
			│
			◆  Select a framework:
			│  ○ Vanilla
			│  ○ Vue
			│  ● React
			│  ○ Preact
			│  ○ Lit
			│  ○ Svelte
			│  ○ Solid
			│  ○ Qwik
			│  ○ Angular
			│  ○ Marko
			│  ○ Others
			└
			
			- Select TypeScript and press [Enter]
			
			│
			◇  Select a framework:
			│  React
			│
			◆  Select a variant:
			│  ● TypeScript
			│  ○ TypeScript + SWC
			│  ○ JavaScript
			│  ○ JavaScript + SWC
			│  ○ React Router v7 ↗
			│  ○ TanStack Router ↗
			│  ○ RedwoodSDK ↗
			└
			
			- Finish process
			│
			◇  Select a framework:
			│  React
			│
			◇  Select a variant:
			│  TypeScript
			│
			◇  Scaffolding project in D:\Documentos\Laboratorios\React\Web\2025\class_01...
			│
			└  Done. Now run:
			
			
		cd class_01
		
		npm install
				
		ls		(you can see:)		
						
			Mode                 LastWriteTime         Length Name
			----                 -------------         ------ ----
			d-----        06/05/2025     11:51                node_modules
			d-----        06/05/2025     11:49                public
			d-----        06/05/2025     11:49                src
			-a----        05/13/2025     11:39            253 .gitignore
			-a----        05/13/2025     11:39            734 eslint.config.js
			-a----        05/13/2025     11:39            366 index.html
			-a----        06/05/2025     11:51         115936 package-lock.json
			-a----        06/05/2025     11:49            678 package.json
			-a----        05/13/2025     11:39           1942 README.md
			-a----        05/13/2025     11:39            702 tsconfig.app.json
			-a----        05/13/2025     11:39            119 tsconfig.json
			-a----        05/13/2025     11:39            630 tsconfig.node.json
			-a----        05/13/2025     11:39            161 vite.config.ts

	npm run dev
	
		- Open http://localhost:5173/ in web browser
	
				
	- Open your favorite IDE, I suppose Microsoft Visual Code and open ../../web_01 directory as project
	

Step 04 - Update the React Project	

	- Open the IDE terminal and execute the next codes:	
		
		npm install react-router-dom
		
	
	- Delete files unnecesaries
	
		- In the <root_project>/src directory, delete the next files:
		
			- App.css
			
			
	- Open <root_project>/src/index.css

		- Delete all code and writes:
		
			body {
			  margin: 0;
			  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
				'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
				sans-serif;
			  -webkit-font-smoothing: antialiased;
			  -moz-osx-font-smoothing: grayscale;

			  background-color: #282c34;
			  color: white;
			}			
			
		- Save changes
	
	
	- Open <root_project>/src/App.tsx

		- Delete all code and writes:
		
			function App() {
			  return (
				<div className="container">
					<h1>Hola mundo</h1>
					<p>
						Esto es solo una prueba de lo que podemos realizar con React Web. <br/>
						Esto incluye el uso de Bootstrap, el redireccionamiento entre las páginas del sitio web, así como el uso de hojas de estilo.
						<br/>
						<b>Usando JavaScript con el estándar ECMAScript 6 (ES6).</b>
						<br/>
						Entre los temas que se abordarán en esta clase se encuentran:
					</p>
					<ul>
						<li>Declaración de variables y constantes.</li>
						<li>Estructuras de control.</li>
						<li>Declaración y uso de funciones.</li>
						<li>Fundamentos de Programación Orientada a Objetos.</li>
					</ul>
				</div>
			  );
			}

			export default App;
			
		- Save changes
	
	
Step 05 - Add first component:

	- Into the <root_project>/src folder, creates new folder called components
	
	- Into the <root_project>/src/components folder, creates new file called navBar.tsx
		
	- Open <root_project>/src/components/navBar.tsx and writes:		
		
		import {Link} from 'react-router-dom';
		import logo from '../assets/react.svg';

		const NavBar =  () => {
			return (
				<nav className="navbar navbar-expand-lg navbar-dark bg-dark">
					<Link className="navbar-brand" to="/">
						<img src={logo} width="40" height="40" alt="Logo de la empresa" />
					</Link>
					<Link className="navbar-brand text-primary" to="/">React Bootstrap</Link>
					<button className="navbar-toggler"
							type="button"
							data-toggle="collapse"
							data-target="#navbarNavAltMarkup"
							aria-controls="navbarNavAltMarkup"
							aria-expanded="false">
						<span className="navbar-toggler-icon" />
					</button>
					<div className="collapse navbar-collapse" id="nvbarNavAltMarkup">
						<ul className="navbar-nav m-auto">
							<li className="nav-item">
								<Link to="/" className="nav-link">Inicio</Link>
							</li>
							<li className="nav-item">
								<Link to="/variables" className="nav-link">Variables</Link>
							</li>
							<li className="nav-item">
								<Link to="/funciones" className="nav-link">Funciones</Link>
							</li>
							<li className="nav-item">
								<Link to="/modulos" className="nav-link">Módulos</Link>
							</li>
							<li className="nav-item">
								<Link to="/acercade" className="nav-link">Acerca de</Link>
							</li>
						</ul>
					</div>
				</nav>
			);
		}

		export default NavBar;
			
	- Save changes
		

Step 06 - Update index.html with boostrap libraries

	- Open <root_project>/index.html
	
		- In the head section (before a title tag) writes:

			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
				  rel="stylesheet"
				  integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" 
				  crossorigin="anonymous">
				  
				  
		- In the body section, at the end, writes:
		
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
				    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
				    crossorigin="anonymous"></script>

	- Save changes


Step 07 - Update main component

	- Open <root_project>/src/main.tsx
	
		- Delete all code and writes:
					
			import ReactDOM from 'react-dom/client';			
			import './index.css'

			import App from './App';
			import NavBar from "./components/navBar";
			import { BrowserRouter } from 'react-router-dom'

			const root = ReactDOM.createRoot(
			  document.getElementById('root') as HTMLElement
			);

			root.render(
			  <BrowserRouter>
				<NavBar />
				<App />
			  </BrowserRouter>
			);
			
		- Save changes	
			

Step 08 - Change the app behavior

	- Change network configuration:
	
		- Open <root_project>/package.json
	
		- Search "scripts" section and update variable:
	
			"dev": "vite --host"
			
	
	- Accept the 'any' data type:
	
		- Open <root_project>/eslint.config.js
		
		- Search "rules" section and add the next instruction:
		
			"@typescript-eslint/no-explicit-any": "off",
		
		
	- Save changes	
	
	
Step 09 - Test changes

	- Open the window terminal into Visual Code or your favorite IDE
			
		- Then execute the next command

			npm run dev		
			
		You can see the next message:
		
			Compiled successfully!                           

			You can now view web_01 in the browser.          

			  ➜  Local:   http://localhost:5173/
			  ➜  Network: http://10.236.2.142:5173/			  

		- Be happy...!
		
		
Step 10 - Add pages.

	- Into the <root_project>/src folder, creates new folder called pages
	
	- Into the <root_project>/src/pages folder, creates the next files:
	
		- acercade.tsx				
		- funciones.tsx
		- modulos.tsx
		- variables.tsx
		
		
Step 11	- Update Acerca de page:

	- Open <root_project>/src/pages/acercade.tsx and writes:		

		const Acercade = () => {
			return (
				<div className="container">
					<h3>Acerca de</h3>
					<p>
						Esta demostración fue creada para el curso de <b>ITI-523 - Tecnologías y 
						Sistemas Web II</b> de la carrera de <b>Tecnologías de Información</b> 
						para la <b>Sede del Pacífico de la UTN</b>, utilizando elementos de:<br/>
					</p>
					<ul>
						<li>HTML y CSS</li>
						<li>JavaScript</li>
						<li>Bootstrap</li>
						<li>NodeJS</li>
						<li>React</li>
						<li>React Router</li>
					</ul>
				</div>
			);
		}

		export default Acercade;
		
	- Save changes	
		
			
Step 12 - Update Variables page:

	- Open <root_project>/src/pages/variables.tsx and writes:		

		// Declaring variables and constants
		const nombre = 'Merlina Addams';
		const pi = 3.1416;

		const entero = 45;
		const precio = 45.99;
		const booleano = true;

		let nombre2 : string = '¿?';
		nombre2 = 'Morticia Addams';

		const fecha = new Date();

		// Declaring arrays
		const nombres : string[] = ['Merlina Addams', 'Morticia Addams', 'Homero Addams', 'Tío Cosa Addams'];
		nombres.push('Tío Lucas Addams');
		nombres.push('Pericles Addams');

		// Declaring associative arrays
		const familia = [
			{nombre: 'Merlina Addams', edad: 18},
			{nombre: 'Morticia Addams', edad: 45},
			{nombre: 'Homero Addams', edad: 50}
		];

		const matriz = [
			[{nombre: 'Merlina Addams', edad: 18},{nombre: 'Morticia Addams', edad: 45},{nombre: 'Homero Addams', edad: 50}],
			[{nombre: 'Herman Munster', edad: 48},{nombre: 'Lily Munster',    edad: 43},{nombre: 'Eddie Munster', edad: 12}]
		];

		const Variables = () => {
			return (
				<div className="container">
					<h3>Variables y Constantes</h3>
					<br/>
					<table className="table table-striped">
						<thead>
							<tr>
								<th>Epresión</th>
								<th>Definición</th>
								<th>Tipo</th>
								<th>Valor</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>Nombre</td>
								<td>Constante</td>
								<td>{typeof nombre}</td>
								<td>{nombre}</td>
							</tr>
							<tr>
								<td>pi</td>
								<td>Constante</td>
								<td>{typeof pi}</td>
								<td>pi</td>
							</tr>
							<tr>
								<td>entero</td>
								<td>Variable</td>
								<td>{typeof entero}</td>
								<td>{entero}</td>
							</tr>
							<tr>
								<td>precio</td>
								<td>Variable</td>
								<td>{typeof precio}</td>
								<td>{precio}</td>
							</tr>
							<tr>
								<td>booleano</td>
								<td>Variable</td>
								<td>{typeof booleano}</td>
								<td>{booleano}</td>
							</tr>
							<tr>
								<td>nombre2</td>
								<td>Variable (let)</td>
								<td>{typeof nombre2}</td>
								<td>{nombre2}</td>
							</tr>
							<tr>
								<td>fecha</td>
								<td>Variable (let)</td>
								<td>{typeof fecha}</td>
								<td>{fecha.toString()}</td>
							</tr>
						</tbody>
					</table>

					<br/>
					<h4>Usando expresiones de tipo Fecha:</h4>
					<table className="table table-striped">
						<thead>
							<tr>
								<th>Formato</th>
								<th>Valor</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>Fecha corta</td>
								<td>{fecha.toLocaleDateString()}</td>
							</tr>
							<tr>
								<td>Fecha larga</td>
								<td>{fecha.toLocaleString()}</td>
							</tr>
							<tr>
								<td>Fecha ISO</td>
								<td>{fecha.toISOString()}</td>
							</tr>
							<tr>
								<td>Hora</td>
								<td>{fecha.toLocaleTimeString()}</td>
							</tr>
							<tr>
								<td>Fecha UTC</td>
								<td>{fecha.toUTCString()}</td>
							</tr>
						</tbody>
					</table>

					<br/>
					<h4>Usando Vectores:</h4>
					<p>El vector nombres de tipo String, contiene {nombres.length} elementos.</p>

					{nombres.map((nombre, index) => (
						<p key={index}>
							{index + 1 + '. ' + nombre + ' '}
						</p>

					))
					}
					
					<br/>
					<p>El vector familia de tipo compuesto, contiene {familia.length} elementos.</p>

					{familia.map((miembro, index) => (
						<p key={index}>
							{index + 1 + '. ' + miembro.nombre + ' - ' + miembro.edad + ' años'}
						</p>))
					}

					<br/>
					<h4>Usando Matrices:</h4>
					<p>La matriz de series de TV tiene {matriz.length} filas y {matriz[0].length} columnas posibles.</p>

					{matriz.map((fila) => (
						fila.map((miembro, index) => (
							<p key={index}>
								{index + 1 + '. ' + miembro.nombre + ' - ' + miembro.edad + ' años'}
							</p>))
					))
					}

				</div>
			);
		}

		export default Variables;
		
		
	- Save changes
	
	
Step 13 - Update Funciones page:

	- Open <root_project>/src/pages/funciones.tsx and writes:
		
		// standard function
		function suma(a:number, b:number) {
			return a + b;
		}

		// arrow function
		const resta = (a:number, b:number) => {
			return a - b;
		}

		// arrow function with implicit return
		const multiplicacion = (a:number, b:number) => a * b;

		// arrow function with implicit return and one parameter
		const cuadrado = (a:number) => a * a;

		// arrow function with implicit return and no parameters
		const fecha = () => new Date();

		const saludo = () => 'Hola';

		const saludo2 = () => {
			return 'Hola';
		}

		const Funciones = () => {
			return (
				<div className="container">
					<h1>Funciones o subrutinas</h1>
					<br/>
					<table className="table table-striped">
						<thead>
							<tr>
								<th>Función</th>
								<th>Definición</th>
								<th>Tipo</th>
								<th>Valor</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>suma(10, 20)</td>
								<td>Standard function</td>
								<td>{typeof suma}</td>
								<td>{suma(10, 20)}</td>
							</tr>
							<tr>
								<td>resta(10, 20)</td>
								<td>Arrow function</td>
								<td>{typeof resta}</td>
								<td>{resta(10, 20)}</td>
							</tr>
							<tr>
								<td>multiplicacion(10, 20)</td>
								<td>Arrow function with implicit return</td>
								<td>{typeof multiplicacion}</td>
								<td>{multiplicacion(10, 20)}</td>
							</tr>
							<tr>
								<td>cuadrado(10)</td>
								<td>Arrow function with implicit return and one parameter</td>
								<td>{typeof cuadrado}</td>
								<td>{cuadrado(10)}</td>
							</tr>
							<tr>
								<td>fecha().toString()</td>
								<td>Arrow function with implicit return and no parameters</td>
								<td>{typeof fecha}</td>
								<td>{fecha().toString()}</td>
							</tr>
							<tr>
								<td>saludo()</td>
								<td>Arrow function with implicit return and no parameters</td>
								<td>{typeof saludo}</td>
								<td>{saludo()}</td>
							</tr>
							<tr>
								<td>saludo2()</td>
								<td>Arrow function with implicit return and no parameters</td>
								<td>{typeof saludo2}</td>
								<td>{saludo2()}</td>
							</tr>
						</tbody>
					</table>
				</div>
			);
		}

		export default Funciones;		
		
		
	- Save changes	
			
			
Step 14 - Update Modulos page:

	- Create a new component, called Component.tsx, into the src/components folder: 
		
		- Open <root_project>/src/components/Component.tsx and write:
		
			import { useState } from "react";

			const myComponent = () => {
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto, setTexto] = useState("Hola Mundo");
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto2, setTexto2] = useState();

				const buttonClick = () => {
					setTexto2(texto2);
				}

				return (
					<div>
						<h5>Mi primer Componente</h5>
						<div>
							<input type="text" value={texto} onChange={(e) => setTexto(e.target.value)}/>
							<button onClick={buttonClick}>Actualizar</button>
							<p>{texto}</p>
							<p>{texto2}</p>
						</div>
					</div>
				)
			}

			export default myComponent;

			
		- Save changes


	- Open <root_project>/src/pages/modulos.tsx and writes:
				
		import myComponent from "../components/component";

		const Modulos = () => {
			return (
				<div className="container">
					<h3>Uso de un componente externo</h3>
					<p>
						Componente para el uso de objetos de formulario web.<br/>
					</p>
					<br/>
					{myComponent()}
				</div>
			);
		}
		
		export default Modulos;
			
			
	- Save changes.	
		
		
Step 15 - Update index component

	- Open <root_project>/src/main.tsx
	
		- Delete all code and writes:
					
			import ReactDOM from 'react-dom/client';
			import './index.css'

			import App from './App';
			import NavBar from "./components/navBar";
			import { BrowserRouter, Routes, Route } from 'react-router-dom'

			import Acercade from "./pages/acercade";
			import Variables from "./pages/variables";			
			import Funciones from "./pages/funciones";
			import Modulos from "./pages/modulos";

			const root = ReactDOM.createRoot(
			  document.getElementById('root') as HTMLElement
			);

			root.render(
			  <BrowserRouter>
				<NavBar />
				  <Routes>
					  <Route path="/" element={<App />} />
					  <Route path="/acercade" element={<Acercade />} />
					  <Route path="/variables" element={<Variables />} />					  
					  <Route path="/funciones" element={<Funciones />} />
					  <Route path="/modulos" element={<Modulos />} />
				  </Routes>
			  </BrowserRouter>
			);
			
			
		- Save changes.	
		
	- Review the Web Browser and try to use the menu options

	- Be happy again...!
	
	
Step 16 - Install web components support

	- Open the terminal window on your IDE (Visual Code)
	
		npm install react-bootstrap bootstrap
		npm install react-select
		
		
	- Open src/components/Component.tsx and write:

		- Delete all code and replace with:
		
			import {useState} from "react";
			import ToggleButton from 'react-bootstrap/ToggleButton';
			import ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';
			import Select from "react-select";

			const myComponent = () => {
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto, setTexto] = useState("Hola Mundo");
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto2, setTexto2] = useState('');

				const buttonClick = () => {
					setTexto2(texto)
				}

				// Controles para los Radio Buttons
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [rbGenero, setRbgenero] = useState("Femenino");
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto3, setTexto3] = useState(rbGenero);

				const seleccionado = (val:any) => {
					setRbgenero(val);
					setTexto3(val);
				}

				// Controles para los Checks Boxes
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [chkOpciones, setChkopciones] = useState(["Ensalada"]);

				const multiOpcion = (val:any) => {setChkopciones(val);}


				// Controles para los Radio Buttons
				// eslint-disable-next-line react-hooks/rules-of-hooks
				const [texto4, setTexto4] = useState(null);


				// eslint-disable-next-line react-hooks/rules-of-hooks
				const dataOptions = [
					{ value: 1, label: "Opción 1" },
					{ value: 2, label: "Opción 2" },
					{ value: 3, label: "Opción 3" },
					{ value: 4, label: "Opción 4" },
					{ value: 5, label: "Opción 5" },
				];

				const listado = (val:any) => {
					setTexto4(val.label);
				}

				const customStyles = () => ({
					control: (provided: any) => ({
						...provided,
						alignItems: "baseline",
						backgroundColor: "white",
						color: "black",

					}),
					option: (provided: any, state: any) => ({
						...provided,
						color: state.isSelected ? "white" : "black",
						backgroundColor: state.isSelected ? "lightblue" : "white",
						"&:hover": {
							backgroundColor: "lightblue",
							color: "black",
						},
					}),
				})

				return (
					<div>
						<h5>Mi primer Componente</h5>
						<div>
							<input type="text" value={texto} onChange={(e) => setTexto(e.target.value)}/>
							<button onClick={buttonClick}>Actualizar</button>
							<p>{texto}</p>
							<p>{texto2}</p>
						</div>
						<br/>
						<h5>Uso de Radio Buttons</h5>
						<div>
							<ToggleButtonGroup type="radio" name="Oneoption" defaultValue={"Femenino"} onChange={seleccionado}>
								<ToggleButton id="tbrFem" value={"Femenino"} variant="outline-warning">Femenino</ToggleButton>
								<ToggleButton id="tbrMas" value={"Masculino"} variant="outline-warning">Masculino</ToggleButton>
								<ToggleButton id="tbrOtr" value={"Otro"} variant="outline-warning">Otro</ToggleButton>
							</ToggleButtonGroup>
							<p>{texto3}</p>
						</div>
						<br/>
						<h5>Uso de CheckBoxes</h5>
						<div>
							<ToggleButtonGroup type="checkbox" name="Multipleoptions" defaultValue={["Ensalada"]}
											   onChange={multiOpcion}>
								<ToggleButton id="chkOpc1" value={"Ensalada"} variant="outline-success">Ensalada</ToggleButton>
								<ToggleButton id="chkOpc2" value={"Pure Nuestra Tierra"} variant="outline-success">Pure Nuestra
									Tierra</ToggleButton>
								<ToggleButton id="chkOpc3" value={"Vegetales al vapor"} variant="outline-success">Vegetales al
									vapor</ToggleButton>
								<ToggleButton id="chkOpc4" value={"Vegetales salteados"} variant="outline-success">Vegetales
									salteados</ToggleButton>
							</ToggleButtonGroup>
							<ol>
								{
									chkOpciones.map((valor, index) => {
										return (
											<li key={index}>
												{valor}
											</li>);
									})
								}
							</ol>
						</div>

						<br />
						<h5>Uso de Comboxes (selected)</h5>
						<div>
							<Select
								options={dataOptions}
								styles={customStyles()}
								onChange={listado}
								placeholder="Seleccione una opción"
							/>
							<p>{texto4}</p>
						</div>


					</div>
				)
			}

			export default myComponent;


	- Save changes	
	
	
Step 16 - Testing again 

	npm run dev
